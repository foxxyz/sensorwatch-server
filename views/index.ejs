<!DOCTYPE html>
<html>
    <head>
        <style>
            * {
                margin: 0;
                padding: 0;
            }
            body {
                font-family: arial;
            }
        </style>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/d3/4.2.0/d3.min.js"></script>
        <title>SensorWatch Monitor</title>
    </head>
    <body>
        <h1>SensorWatch Monitor</h1>
        <p class="current">Current Temp: <span></span></p>
        <svg class="sensorchart" width="1000" height="600">
            <g class="x axis"></g>
            <g class="y axis"></g>
            <g class="plot"></g>
        </svg>
        <script>
            const UNITS = {
                'degreesCelsius': '°C',
                'degreesFahrenheit': '°F'
            }

            var results = <%= results %>
            var host = location.origin.replace(/^http/, 'ws')
            var ws = new WebSocket(host)
            ws.onmessage = function (event) {
                var data = JSON.parse(event.data)
                document.querySelector('.current span').innerHTML = parseFloat(data.value) + UNITS[data.unit]
            }

            var svg = d3.select('.sensorchart')
            var width = 1200
            var height = 600
            var margin = {top: 40, bottom: 50, left: 60, right: 40}

            var x = d3.scaleTime()
                .domain([new Date(results[0][0]), new Date(results[results.length - 1][0])])
                .rangeRound([margin.left, width - margin.left - margin.right])

            var y = d3.scaleLinear()
                .domain([d3.min(results, (d) => { return d[1] }), d3.max(results, (d) => { return d[1] })])
                .range([height - margin.top - margin.bottom, margin.bottom])

            var xAxis = d3.axisBottom(x)
                .ticks(d3.timeMinute.every(60))
                .tickSize(0)
                .tickPadding(8)

            var yAxis = d3.axisLeft(y)
                .tickPadding(8)

            var bars = svg.select('.plot').selectAll("rect")
               .data(results)
               .enter()
               .append("rect")
               .attr("fill", "teal")
               .attr("x", function(d) {
                    return x(d[0]);
                })
               .attr("y", height - margin.bottom)
               .attr("width", 20)
               .attr("height", 1)

            svg.select('.x.axis')
                .attr('transform', 'translate(0, ' + (height - margin.bottom) + ')')
                .call(xAxis)

            svg.select('.y.axis')
                .attr('transform', 'translate(' + margin.left + ', 0)')
                .call(yAxis)

            bars.transition()
              .duration(500)
              .delay(100)
              .attr("y", function(d) {
                    return y(d[1])
                })
               .attr("height", function(d) {
                    return height - margin.bottom - y(d[1])
                })
        </script>
    </body>
</html>